syntax = "proto3";

package tinyd.v1;

option go_package = "github.com/tinyd-me/tinyd-proto/tinyd/proto/v1;tinydv1";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
  external_docs: {
    url: "https://github.com/tinyd-me/tinyd-proto"
    description: "Protobuf definitions for TinyD."
  }
  schemes: HTTP
  schemes: HTTPS
  security_definitions: {
    security: {
      key: "apiKey"
      value: {
        type: TYPE_API_KEY
        name: "X-API-KEY"
        in: IN_HEADER
      }
    }
  }
  security: {
    security_requirement: {
      key: "apiKey",
    }
  }
};

message StatusCheckResponse {
  // ServingStatus denotes the status of the service.
  enum ServingStatus {
    SERVING_STATUS_INVALID = 0;
    SERVING_STATUS_UNKNOWN = 1;
    SERVING_STATUS_SERVING = 2;
    SERVING_STATUS_NOT_SERVING = 3;
  }
  ServingStatus serving_status = 1;
}

// StatusCheckAPI defines the liveness and readiness check service.
service StatusCheckAPI {
  rpc ReadinessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /v1/readiness
      get: "/v1/readiness"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Do a readiness check"
      description: "Checks responsiveness of all the dependant resources that the service is using."
      tags: "StatusCheck"
      security: {}
    };
  }

  rpc LivenessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /v1/liveness
      get: "/v1/liveness"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Do a liveness check"
      description: "Checks only for the responsiveness of the service."
      tags: "StatusCheck"
      security: {}
    };
  }
}

service UrlShortener {
  rpc CreateShortUrl(CreateShortUrlRequest) returns (CreateShortUrlResponse) {
    option (google.api.http) = {
      post: "/api/v1/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create new short URL"
      description: "Creates a new short URL for the provided target URL. If a preferred short key is provided, it will be used to generate the short URL."
      tags: "CreateShortUrl"
    };
  }

  rpc GetTargetUrl(GetTargetUrlRequest) returns (GetTargetUrlResponse) {
    option (google.api.http) = {
      get: "/api/v1/target/{short_key}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Returns the target URL given the short key"
      description: "Returns the target URL associated with the given short key."
      tags: "GetTargetUrl"
    };
  }
}

message CreateShortUrlRequest {
  string target_url = 1
  [(google.api.field_behavior) = REQUIRED];
  string preferred_short_key = 2
  [(google.api.field_behavior) = OPTIONAL];
}

message CreateShortUrlResponse {
  string target_url = 1
  [(google.api.field_behavior) = REQUIRED];
  string short_key = 2
  [(google.api.field_behavior) = REQUIRED];
  string host = 3
  [(google.api.field_behavior) = REQUIRED];
}

message GetTargetUrlRequest {
  string short_key = 1
  [(google.api.field_behavior) = REQUIRED];
}

message GetTargetUrlResponse {
  string target_url = 1
  [(google.api.field_behavior) = REQUIRED];
}
